3. Link List Programme
#include <stdio.h>
#include <stdlib.h>
struct node {
int data;
struct node *next;
};

struct node *start = NULL,*q,*prev,*a, *b, *p,*next;
int n,i;
void insert_at_begin(int);
void insert_at_end(int);
void rev();
void delete_from_begin();
void delete_from_end();
void display();
void concatenate(struct node *a,struct node *b);
void display_con(struct node *head);
int count = 0;
int main () {
int i, data;
struct node *head;
for (;;) {
printf("1. Insert an element at the beginning of linked list.\n");
printf("2. Insert an element at the end of linked list.\n");
printf("3. Reverse linked list.\n");
printf("4. Delete an element from beginning.\n");
printf("5. Delete an element from end.\n");
printf("6. Display the element.\n");
printf("7. Concatenate of two linklist\n");
printf("8. Display the concatenate element.\n");
printf("9. Exit\n");
scanf("%d", &i);
if (i == 1) {
printf("Enter value of element\n");
scanf("%d", &data);
insert_at_begin(data);
}
else if (i == 2) {
printf("Enter value of element\n");
scanf("%d", &data);
insert_at_end(data);
}
else if (i == 3)
rev();

else if (i == 4)
delete_from_begin();
else if (i == 5)
delete_from_end();
else if (i == 6)
display();
else if (i == 7)
{
printf ("number of elements in a:");
scanf("%d",&n);
a=NULL;
for(i=0;i<n;i++)
{
p=(struct node*)malloc(sizeof(struct node));
scanf("%d",&p->data);
p->next=NULL;
if(a==NULL)
a=p;
else
prev->next=p;
prev=p;
}
printf ("number of elements in b:");
scanf("%d",&n);
b=NULL;
for(i=0;i<n;i++)
{
p=(struct node*)malloc(sizeof(struct node));
scanf("%d",&p->data);
p->next=NULL;
if(b==NULL)
b=p;
else
prev->next=p;
prev=p;
}
concatenate(a,b);
}
else if (i == 8)
display_con(next);
else

printf("Please enter valid input.\n");
}
return 0;
}
void insert_at_begin(int x) {
struct node *t;
t = (struct node*)malloc(sizeof(struct node));
t->data = x;
count++;
if (start == NULL) {
start = t;
start->next = NULL;
return;
}
t->next = start;
start = t;
}
void insert_at_end(int x) {
struct node *t, *temp;
t = (struct node*)malloc(sizeof(struct node));
t->data = x;
count++;
if (start == NULL) {
start = t;
start->next = NULL;
return;
}
temp = start;
while (temp->next != NULL)
temp = temp->next;

temp->next = t;
t->next = NULL;
}
void rev() {
struct node *t;
t = start;
if (t == NULL) {
printf("Linked list is empty.\n");
return;
}
printf("There are %d elements in linked list.\n", count);
while (t->next != NULL) {
printf("%d\n", t->data);
t = t->next;
}
printf("%d\n", t->data);
}
void delete_from_begin() {
struct node *t;
int n;
if (start == NULL) {
printf("Linked list is empty.\n");
return;
}
n = start->data;
t = start->next;
free(start);
start = t;
count--;
printf("%d deleted from the beginning successfully.\n", n);
}
9
void delete_from_end() {
struct node *t, *u;
int n;
if (start == NULL) {
printf("Linked list is empty.\n");
return;
}
count--;
if (start->next == NULL) {
n = start->data;
free(start);
start = NULL;
printf("%d deleted from end successfully.\n", n);
return;
}
t = start;
while (t->next != NULL) {
u = t;
t = t->next;
}
n = t->data;
u->next = NULL;
free(t);
printf("%d deleted from end successfully.\n", n);
}
void display()
{
if(start==NULL)
{
printf("List is empty!!");
}
else
{
10
q=start;
printf("The linked list is:\n");
while(q!=NULL)
{
printf("%d->",q->data);
q=q->next;
}
}
}
void concatenate(struct node *a,struct node *b)
{
if( a != NULL && b!= NULL )
{
if (a->next == NULL)
a->next = b;
else
concatenate(a->next,b);
}
else
{
printf("Either a or b is NULL\n");
}
}
void display_con(struct node *head)
{
if(head == NULL)
{
printf("NULL\n");
}
else
{
printf("%d\n", head -> data);
display_con(head->next);
}
}